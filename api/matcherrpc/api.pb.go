// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package dcrticketmatcher is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	FindMatchesRequest
	FindMatchesResponse
	SubmitInputTxReq
	SubmitInputTxRes
	SignTransactionRequest
	SignTransactionResponse
	PublishResultRequest
	PublishResultResponse
	StatusRequest
	StatusResponse
*/
package dcrticketmatcher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindMatchesRequest struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *FindMatchesRequest) Reset()                    { *m = FindMatchesRequest{} }
func (m *FindMatchesRequest) String() string            { return proto.CompactTextString(m) }
func (*FindMatchesRequest) ProtoMessage()               {}
func (*FindMatchesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FindMatchesRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type FindMatchesResponse struct {
	SessionId int32 `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *FindMatchesResponse) Reset()                    { *m = FindMatchesResponse{} }
func (m *FindMatchesResponse) String() string            { return proto.CompactTextString(m) }
func (*FindMatchesResponse) ProtoMessage()               {}
func (*FindMatchesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FindMatchesResponse) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type SubmitInputTxReq struct {
	SessionId int32  `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SplitTx   []byte `protobuf:"bytes,2,opt,name=split_tx,json=splitTx,proto3" json:"split_tx,omitempty"`
}

func (m *SubmitInputTxReq) Reset()                    { *m = SubmitInputTxReq{} }
func (m *SubmitInputTxReq) String() string            { return proto.CompactTextString(m) }
func (*SubmitInputTxReq) ProtoMessage()               {}
func (*SubmitInputTxReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SubmitInputTxReq) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SubmitInputTxReq) GetSplitTx() []byte {
	if m != nil {
		return m.SplitTx
	}
	return nil
}

type SubmitInputTxRes struct {
	TicketTx  []byte  `protobuf:"bytes,1,opt,name=ticket_tx,json=ticketTx,proto3" json:"ticket_tx,omitempty"`
	InputsIds []int32 `protobuf:"varint,2,rep,packed,name=inputs_ids,json=inputsIds" json:"inputs_ids,omitempty"`
	OutputIds []int32 `protobuf:"varint,3,rep,packed,name=output_ids,json=outputIds" json:"output_ids,omitempty"`
}

func (m *SubmitInputTxRes) Reset()                    { *m = SubmitInputTxRes{} }
func (m *SubmitInputTxRes) String() string            { return proto.CompactTextString(m) }
func (*SubmitInputTxRes) ProtoMessage()               {}
func (*SubmitInputTxRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubmitInputTxRes) GetTicketTx() []byte {
	if m != nil {
		return m.TicketTx
	}
	return nil
}

func (m *SubmitInputTxRes) GetInputsIds() []int32 {
	if m != nil {
		return m.InputsIds
	}
	return nil
}

func (m *SubmitInputTxRes) GetOutputIds() []int32 {
	if m != nil {
		return m.OutputIds
	}
	return nil
}

type SignTransactionRequest struct {
	SessionId int32  `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SplitTx   []byte `protobuf:"bytes,2,opt,name=split_tx,json=splitTx,proto3" json:"split_tx,omitempty"`
	ReqType   int32  `protobuf:"varint,3,opt,name=req_type,json=reqType" json:"req_type,omitempty"`
}

func (m *SignTransactionRequest) Reset()                    { *m = SignTransactionRequest{} }
func (m *SignTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SignTransactionRequest) ProtoMessage()               {}
func (*SignTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SignTransactionRequest) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SignTransactionRequest) GetSplitTx() []byte {
	if m != nil {
		return m.SplitTx
	}
	return nil
}

func (m *SignTransactionRequest) GetReqType() int32 {
	if m != nil {
		return m.ReqType
	}
	return 0
}

type SignTransactionResponse struct {
	TicketTx  []byte `protobuf:"bytes,1,opt,name=ticket_tx,json=ticketTx,proto3" json:"ticket_tx,omitempty"`
	Publisher bool   `protobuf:"varint,2,opt,name=publisher" json:"publisher,omitempty"`
}

func (m *SignTransactionResponse) Reset()                    { *m = SignTransactionResponse{} }
func (m *SignTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SignTransactionResponse) ProtoMessage()               {}
func (*SignTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SignTransactionResponse) GetTicketTx() []byte {
	if m != nil {
		return m.TicketTx
	}
	return nil
}

func (m *SignTransactionResponse) GetPublisher() bool {
	if m != nil {
		return m.Publisher
	}
	return false
}

type PublishResultRequest struct {
	SessionId int32  `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	JoinedTx  []byte `protobuf:"bytes,2,opt,name=joined_tx,json=joinedTx,proto3" json:"joined_tx,omitempty"`
	ReqType   int32  `protobuf:"varint,3,opt,name=req_type,json=reqType" json:"req_type,omitempty"`
}

func (m *PublishResultRequest) Reset()                    { *m = PublishResultRequest{} }
func (m *PublishResultRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishResultRequest) ProtoMessage()               {}
func (*PublishResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PublishResultRequest) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PublishResultRequest) GetJoinedTx() []byte {
	if m != nil {
		return m.JoinedTx
	}
	return nil
}

func (m *PublishResultRequest) GetReqType() int32 {
	if m != nil {
		return m.ReqType
	}
	return 0
}

type PublishResultResponse struct {
	TicketTx []byte `protobuf:"bytes,1,opt,name=ticket_tx,json=ticketTx,proto3" json:"ticket_tx,omitempty"`
}

func (m *PublishResultResponse) Reset()                    { *m = PublishResultResponse{} }
func (m *PublishResultResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishResultResponse) ProtoMessage()               {}
func (*PublishResultResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PublishResultResponse) GetTicketTx() []byte {
	if m != nil {
		return m.TicketTx
	}
	return nil
}

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type StatusResponse struct {
	TicketPrice uint64 `protobuf:"varint,1,opt,name=ticket_price,json=ticketPrice" json:"ticket_price,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StatusResponse) GetTicketPrice() uint64 {
	if m != nil {
		return m.TicketPrice
	}
	return 0
}

func init() {
	proto.RegisterType((*FindMatchesRequest)(nil), "dcrticketmatcher.FindMatchesRequest")
	proto.RegisterType((*FindMatchesResponse)(nil), "dcrticketmatcher.FindMatchesResponse")
	proto.RegisterType((*SubmitInputTxReq)(nil), "dcrticketmatcher.SubmitInputTxReq")
	proto.RegisterType((*SubmitInputTxRes)(nil), "dcrticketmatcher.SubmitInputTxRes")
	proto.RegisterType((*SignTransactionRequest)(nil), "dcrticketmatcher.SignTransactionRequest")
	proto.RegisterType((*SignTransactionResponse)(nil), "dcrticketmatcher.SignTransactionResponse")
	proto.RegisterType((*PublishResultRequest)(nil), "dcrticketmatcher.PublishResultRequest")
	proto.RegisterType((*PublishResultResponse)(nil), "dcrticketmatcher.PublishResultResponse")
	proto.RegisterType((*StatusRequest)(nil), "dcrticketmatcher.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "dcrticketmatcher.StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SplitTxMatcherService service

type SplitTxMatcherServiceClient interface {
	FindMatches(ctx context.Context, in *FindMatchesRequest, opts ...grpc.CallOption) (*FindMatchesResponse, error)
	PublishTicket(ctx context.Context, in *SubmitInputTxReq, opts ...grpc.CallOption) (*SubmitInputTxRes, error)
	SubmitSignedTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error)
	PublishResult(ctx context.Context, in *PublishResultRequest, opts ...grpc.CallOption) (*PublishResultResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type splitTxMatcherServiceClient struct {
	cc *grpc.ClientConn
}

func NewSplitTxMatcherServiceClient(cc *grpc.ClientConn) SplitTxMatcherServiceClient {
	return &splitTxMatcherServiceClient{cc}
}

func (c *splitTxMatcherServiceClient) FindMatches(ctx context.Context, in *FindMatchesRequest, opts ...grpc.CallOption) (*FindMatchesResponse, error) {
	out := new(FindMatchesResponse)
	err := grpc.Invoke(ctx, "/dcrticketmatcher.SplitTxMatcherService/FindMatches", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitTxMatcherServiceClient) PublishTicket(ctx context.Context, in *SubmitInputTxReq, opts ...grpc.CallOption) (*SubmitInputTxRes, error) {
	out := new(SubmitInputTxRes)
	err := grpc.Invoke(ctx, "/dcrticketmatcher.SplitTxMatcherService/PublishTicket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitTxMatcherServiceClient) SubmitSignedTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error) {
	out := new(SignTransactionResponse)
	err := grpc.Invoke(ctx, "/dcrticketmatcher.SplitTxMatcherService/SubmitSignedTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitTxMatcherServiceClient) PublishResult(ctx context.Context, in *PublishResultRequest, opts ...grpc.CallOption) (*PublishResultResponse, error) {
	out := new(PublishResultResponse)
	err := grpc.Invoke(ctx, "/dcrticketmatcher.SplitTxMatcherService/PublishResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *splitTxMatcherServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/dcrticketmatcher.SplitTxMatcherService/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SplitTxMatcherService service

type SplitTxMatcherServiceServer interface {
	FindMatches(context.Context, *FindMatchesRequest) (*FindMatchesResponse, error)
	PublishTicket(context.Context, *SubmitInputTxReq) (*SubmitInputTxRes, error)
	SubmitSignedTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error)
	PublishResult(context.Context, *PublishResultRequest) (*PublishResultResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterSplitTxMatcherServiceServer(s *grpc.Server, srv SplitTxMatcherServiceServer) {
	s.RegisterService(&_SplitTxMatcherService_serviceDesc, srv)
}

func _SplitTxMatcherService_FindMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTxMatcherServiceServer).FindMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTxMatcherService/FindMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTxMatcherServiceServer).FindMatches(ctx, req.(*FindMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SplitTxMatcherService_PublishTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitInputTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTxMatcherServiceServer).PublishTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTxMatcherService/PublishTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTxMatcherServiceServer).PublishTicket(ctx, req.(*SubmitInputTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SplitTxMatcherService_SubmitSignedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTxMatcherServiceServer).SubmitSignedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTxMatcherService/SubmitSignedTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTxMatcherServiceServer).SubmitSignedTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SplitTxMatcherService_PublishResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTxMatcherServiceServer).PublishResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTxMatcherService/PublishResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTxMatcherServiceServer).PublishResult(ctx, req.(*PublishResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SplitTxMatcherService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitTxMatcherServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dcrticketmatcher.SplitTxMatcherService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitTxMatcherServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SplitTxMatcherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dcrticketmatcher.SplitTxMatcherService",
	HandlerType: (*SplitTxMatcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMatches",
			Handler:    _SplitTxMatcherService_FindMatches_Handler,
		},
		{
			MethodName: "PublishTicket",
			Handler:    _SplitTxMatcherService_PublishTicket_Handler,
		},
		{
			MethodName: "SubmitSignedTransaction",
			Handler:    _SplitTxMatcherService_SubmitSignedTransaction_Handler,
		},
		{
			MethodName: "PublishResult",
			Handler:    _SplitTxMatcherService_PublishResult_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _SplitTxMatcherService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xed, 0x6e, 0xd3, 0x30,
	0x14, 0x55, 0x57, 0xe8, 0x9a, 0xbb, 0x0d, 0x26, 0xc3, 0xb6, 0x92, 0x81, 0x28, 0x16, 0x1f, 0x45,
	0x42, 0xfd, 0xc1, 0xf6, 0x0c, 0x48, 0x15, 0x20, 0x4d, 0x49, 0x24, 0x24, 0xfe, 0x94, 0x34, 0xbe,
	0x62, 0x86, 0xc6, 0x71, 0xfd, 0x81, 0xba, 0x67, 0xe6, 0x25, 0x50, 0x6c, 0x97, 0x95, 0xa6, 0xb4,
	0xd5, 0x7e, 0xde, 0x73, 0xcf, 0xc9, 0xf5, 0xb1, 0xcf, 0x0d, 0x44, 0xb9, 0xe4, 0x43, 0xa9, 0x2a,
	0x53, 0x91, 0x63, 0x56, 0x28, 0xc3, 0x8b, 0x9f, 0x68, 0xca, 0xdc, 0x14, 0xd7, 0xa8, 0xe8, 0x3b,
	0x20, 0x1f, 0xb8, 0x60, 0x9f, 0x5d, 0xa9, 0x13, 0x9c, 0x59, 0xd4, 0x86, 0x9c, 0x42, 0x27, 0x2f,
	0x2b, 0x2b, 0x4c, 0xaf, 0xd5, 0x6f, 0x0d, 0xee, 0x25, 0xa1, 0xa2, 0x97, 0xf0, 0xe8, 0x1f, 0xb6,
	0x96, 0x95, 0xd0, 0x48, 0x9e, 0x01, 0x68, 0xd4, 0x9a, 0x57, 0x62, 0xcc, 0x99, 0x93, 0xdc, 0x4f,
	0xa2, 0x80, 0x8c, 0x18, 0xfd, 0x04, 0xc7, 0xa9, 0x9d, 0x94, 0xdc, 0x8c, 0x84, 0xb4, 0x26, 0x9b,
	0x27, 0x38, 0xdb, 0x22, 0x21, 0x4f, 0xa0, 0xab, 0xe5, 0x94, 0x9b, 0xb1, 0x99, 0xf7, 0xf6, 0xfa,
	0xad, 0xc1, 0x61, 0xb2, 0xef, 0xea, 0x6c, 0x4e, 0xcb, 0xc6, 0xd7, 0x34, 0x39, 0x87, 0xc8, 0xdb,
	0xaa, 0xf9, 0x2d, 0xc7, 0xef, 0x7a, 0x20, 0x9b, 0xd7, 0xa3, 0x78, 0x4d, 0xd5, 0x63, 0xce, 0x74,
	0x6f, 0xaf, 0xdf, 0xae, 0x47, 0x79, 0x64, 0xc4, 0x74, 0xdd, 0xae, 0xac, 0x91, 0xd6, 0xb8, 0x76,
	0xdb, 0xb7, 0x3d, 0x32, 0x62, 0x9a, 0x96, 0x70, 0x9a, 0xf2, 0xef, 0x22, 0x53, 0xb9, 0xd0, 0x79,
	0x61, 0x78, 0x25, 0x16, 0x97, 0x74, 0x67, 0x0b, 0x75, 0x4b, 0xe1, 0x6c, 0x6c, 0x6e, 0x24, 0xf6,
	0xda, 0x4e, 0xb7, 0xaf, 0x70, 0x96, 0xdd, 0x48, 0xa4, 0x19, 0x9c, 0x35, 0xc6, 0x85, 0x5b, 0xde,
	0x68, 0xf2, 0x29, 0x44, 0xd2, 0x4e, 0xa6, 0x5c, 0x5f, 0xa3, 0x72, 0xe3, 0xba, 0xc9, 0x2d, 0x40,
	0x4b, 0x78, 0x7c, 0xe5, 0x8b, 0x04, 0xb5, 0x9d, 0x9a, 0x1d, 0x2d, 0x9c, 0x43, 0xf4, 0xa3, 0xe2,
	0x02, 0xd9, 0xad, 0x87, 0xae, 0x07, 0x36, 0x9b, 0xb8, 0x84, 0x93, 0x95, 0x71, 0x3b, 0x58, 0xa0,
	0x0f, 0xe1, 0x28, 0x35, 0xb9, 0xb1, 0x8b, 0x14, 0xd2, 0x0b, 0x78, 0xb0, 0x00, 0x82, 0xfe, 0x05,
	0x1c, 0x06, 0xbd, 0x54, 0xbc, 0xc0, 0x90, 0xce, 0x03, 0x8f, 0x5d, 0xd5, 0xd0, 0xfb, 0xdf, 0x6d,
	0x38, 0x49, 0xfd, 0x3d, 0xfb, 0x98, 0xaa, 0x14, 0xd5, 0x2f, 0x5e, 0x20, 0xf9, 0x0a, 0x07, 0x4b,
	0xe1, 0x25, 0x2f, 0x87, 0xab, 0xcb, 0x30, 0x6c, 0x6e, 0x42, 0xfc, 0x6a, 0x0b, 0x2b, 0x1c, 0xec,
	0x0b, 0x1c, 0x05, 0xc7, 0x99, 0xe3, 0x12, 0xda, 0xd4, 0xad, 0xee, 0x40, 0xbc, 0x9d, 0xa3, 0x89,
	0x80, 0x33, 0x8f, 0xd5, 0xa9, 0x40, 0xb6, 0x94, 0x0b, 0x32, 0x58, 0x23, 0x5f, 0x9b, 0xd4, 0xf8,
	0xed, 0x0e, 0xcc, 0x60, 0xe4, 0xdb, 0x5f, 0x23, 0xfe, 0xe9, 0xc8, 0xeb, 0xa6, 0x76, 0x5d, 0x94,
	0xe2, 0x37, 0x5b, 0x79, 0x61, 0xc2, 0x47, 0xe8, 0xf8, 0x57, 0x25, 0xcf, 0xd7, 0x1c, 0x6b, 0x39,
	0x00, 0x71, 0xff, 0xff, 0x04, 0xff, 0xb1, 0x49, 0xc7, 0xfd, 0xd7, 0x2e, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xae, 0xa5, 0x10, 0x40, 0xe4, 0x04, 0x00, 0x00,
}
